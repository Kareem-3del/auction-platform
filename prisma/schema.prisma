generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                  @id @default(cuid())
  email                     String                  @unique
  phone                     String?                 @unique
  passwordHash              String                  @map("password_hash")
  firstName                 String                  @map("first_name")
  lastName                  String                  @map("last_name")
  avatarUrl                 String?                 @map("avatar_url")
  isAnonymousDisplay        Boolean                 @default(true) @map("is_anonymous_display")
  anonymousDisplayName      String                  @map("anonymous_display_name")
  anonymousAvatarUrl        String                  @map("anonymous_avatar_url")
  userType                  UserType                @default(BUYER) @map("user_type")
  isActive                  Boolean                 @default(true) @map("is_active")
  balanceReal               Decimal                 @default(0) @map("balance_real") @db.Decimal(12, 2)
  balanceVirtual            Decimal                 @default(0) @map("balance_virtual") @db.Decimal(12, 2)
  virtualMultiplier         Decimal                 @default(3.0) @map("virtual_multiplier") @db.Decimal(4, 2)
  kycStatus                 KYCStatus               @default(PENDING) @map("kyc_status")
  kycDocuments              Json?                   @map("kyc_documents")
  kycSubmittedAt            DateTime?               @map("kyc_submitted_at")
  kycVerifiedAt             DateTime?               @map("kyc_verified_at")
  emailVerified             Boolean                 @default(false) @map("email_verified")
  emailVerifiedAt           DateTime?               @map("email_verified_at")
  phoneVerified             Boolean                 @default(false) @map("phone_verified")
  phoneVerifiedAt           DateTime?               @map("phone_verified_at")
  lastLoginAt               DateTime?               @map("last_login_at")
  lastLoginIP               String?                 @map("last_login_ip")
  loginAttempts             Int                     @default(0) @map("login_attempts")
  lockedUntil               DateTime?               @map("locked_until")
  notificationSoundEnabled  Boolean                 @default(true) @map("notification_sound_enabled")
  emailNotificationsEnabled Boolean                 @default(true) @map("email_notifications_enabled")
  pushNotificationsEnabled  Boolean                 @default(true) @map("push_notifications_enabled")
  createdAt                 DateTime                @default(now()) @map("created_at")
  updatedAt                 DateTime                @updatedAt @map("updated_at")
  balanceUSD                Decimal                 @default(0) @map("balance_usd") @db.Decimal(12, 2)
  googleId                  String?                 @unique @map("google_id")
  reviews                   AgentReview[]           @relation("ReviewAuthor")
  agent                     Agent?
  targetedAudits            AuditLog[]              @relation("AuditTarget")
  createdAudits             AuditLog[]              @relation("AuditPerformedBy")
  autoBids                  AutoBid[]
  adminBalanceAdjustments   BalanceAdjustment[]     @relation("AdminBalanceAdjustments")
  balanceAdjustments        BalanceAdjustment[]     @relation("UserBalanceAdjustments")
  bids                      Bid[]
  binanceRecharges          BinanceRecharge[]
  emailVerifications        EmailVerification[]
  uploadedFiles             File[]                  @relation("FileUploader")
  notificationPreference    NotificationPreference?
  notifications             Notification[]
  paymentMethods            PaymentMethod[]
  highestBidProducts        Product[]               @relation("ProductHighestBidder")
  wonProducts               Product[]               @relation("ProductWinner")
  supportMessages           SupportMessage[]        @relation("SupportMessageUser")
  assignedTickets           SupportTicket[]         @relation("TicketAssignee")
  resolvedTickets           SupportTicket[]         @relation("TicketResolver")
  supportTickets            SupportTicket[]
  ticketAttachments         TicketAttachment[]      @relation("TicketAttachmentUser")
  transactions              Transaction[]
  favorites                 UserFavorite[]
  sessions                  UserSession[]
  whishRecharges            WhishRecharge[]

  @@map("users")
}

model Agent {
  id                    String        @id @default(cuid())
  userId                String        @unique @map("user_id")
  businessName          String        @map("business_name")
  displayName           String        @map("display_name")
  bio                   String?
  logoUrl               String?       @map("logo_url")
  bannerImageUrl        String?       @map("banner_image_url")
  websiteUrl            String?       @map("website_url")
  businessType          BusinessType  @map("business_type")
  licenseNumber         String?       @map("license_number")
  registrationNumber    String?       @map("registration_number")
  taxId                 String?       @map("tax_id")
  status                AgentStatus   @default(PENDING)
  commissionRate        Decimal       @default(0.05) @map("commission_rate") @db.Decimal(4, 4)
  totalSales            Decimal       @default(0) @map("total_sales") @db.Decimal(15, 2)
  totalCommissions      Decimal       @default(0) @map("total_commissions") @db.Decimal(15, 2)
  totalAuctions         Int           @default(0) @map("total_auctions")
  successfulAuctions    Int           @default(0) @map("successful_auctions")
  averageAuctionValue   Decimal       @default(0) @map("average_auction_value") @db.Decimal(12, 2)
  rating                Decimal       @default(0) @db.Decimal(3, 2)
  reviewCount           Int           @default(0) @map("review_count")
  autoApprovalLimit     Decimal       @default(1000) @map("auto_approval_limit") @db.Decimal(10, 2)
  requiresApproval      Boolean       @default(true) @map("requires_approval")
  verificationDocuments Json?         @map("verification_documents")
  backgroundCheckData   Json?         @map("background_check_data")
  complianceScore       Int           @default(100) @map("compliance_score")
  approvedAt            DateTime?     @map("approved_at")
  approvedBy            String?       @map("approved_by")
  rejectedAt            DateTime?     @map("rejected_at")
  rejectionReason       String?       @map("rejection_reason")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  reviews               AgentReview[] @relation("AgentReviews")
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  commissions           Commission[]
  products              Product[]

  @@map("agents")
}

model Category {
  id            String     @id @default(cuid())
  parentId      String?    @map("parent_id")
  name          String
  slug          String     @unique
  description   String?
  iconUrl       String?    @map("icon_url")
  imageUrl      String?    @map("image_url")
  sortOrder     Int        @default(0) @map("sort_order")
  isActive      Boolean    @default(true) @map("is_active")
  isFeatured    Boolean    @default(false) @map("is_featured")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  descriptionAr String?    @map("description_ar")
  nameAr        String?    @map("name_ar")
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryHierarchy")
  products      Product[]

  @@map("categories")
}

model Brand {
  id            String    @id @default(cuid())
  name          String    @unique
  slug          String    @unique
  description   String?
  logoUrl       String?   @map("logo_url")
  websiteUrl    String?   @map("website_url")
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  descriptionAr String?   @map("description_ar")
  nameAr        String?   @map("name_ar")
  products      Product[]

  @@map("brands")
}

model Tag {
  id            String       @id @default(cuid())
  name          String       @unique
  slug          String       @unique
  description   String?
  color         String?      @default("#1976d2")
  isActive      Boolean      @default(true) @map("is_active")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  descriptionAr String?      @map("description_ar")
  nameAr        String?      @map("name_ar")
  productTags   ProductTag[]

  @@map("tags")
}

model ProductTag {
  id        String   @id @default(cuid())
  productId String   @map("product_id")
  tagId     String   @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
  @@map("product_tags")
}

model Product {
  id                       String            @id @default(cuid())
  agentId                  String?           @map("agent_id")
  categoryId               String            @map("category_id")
  brandId                  String?           @map("brand_id")
  title                    String
  description              String
  shortDescription         String?           @map("short_description")
  condition                ProductCondition
  location                 String
  images                   Json              @default("[]")
  videos                   Json?             @default("[]")
  documents                Json?             @default("[]")
  thumbnailIndex           Int               @default(0) @map("thumbnail_index")
  specifications           Json?             @default("{}")
  customFields             Json?             @default("[]") @map("custom_fields")
  estimatedValueMin        Decimal?          @map("estimated_value_min") @db.Decimal(15, 2)
  estimatedValueMax        Decimal?          @map("estimated_value_max") @db.Decimal(15, 2)
  startingBid              Decimal           @default(0) @map("starting_bid") @db.Decimal(15, 2)
  reservePrice             Decimal?          @map("reserve_price") @db.Decimal(15, 2)
  buyNowPrice              Decimal?          @map("buy_now_price") @db.Decimal(15, 2)
  currentBid               Decimal           @default(0) @map("current_bid") @db.Decimal(15, 2)
  bidIncrement             Decimal           @default(5) @map("bid_increment") @db.Decimal(10, 2)
  auctionType              AuctionType       @default(LIVE) @map("auction_type")
  auctionStatus            AuctionStatus     @default(SCHEDULED) @map("auction_status")
  startTime                DateTime?         @map("start_time")
  endTime                  DateTime?         @map("end_time")
  timezone                 String            @default("UTC")
  duration                 Int?              @map("duration_minutes")
  highestBidderId          String?           @map("highest_bidder_id")
  bidCount                 Int               @default(0) @map("bid_count")
  uniqueBidders            Int               @default(0) @map("unique_bidders")
  autoExtend               Boolean           @default(true) @map("auto_extend")
  extensionTriggerMinutes  Int               @default(2) @map("extension_trigger_minutes")
  extensionDurationMinutes Int               @default(5) @map("extension_duration_minutes")
  maxExtensions            Int               @default(3) @map("max_extensions")
  extensionsUsed           Int               @default(0) @map("extensions_used")
  showBidderNames          Boolean           @default(true) @map("show_bidder_names")
  showBidCount             Boolean           @default(true) @map("show_bid_count")
  showWatcherCount         Boolean           @default(true) @map("show_watcher_count")
  winnerId                 String?           @map("winner_id")
  finalPrice               Decimal?          @map("final_price") @db.Decimal(12, 2)
  soldAt                   DateTime?         @map("sold_at")
  actualStartTime          DateTime?         @map("actual_start_time")
  actualEndTime            DateTime?         @map("actual_end_time")
  lastBidAt                DateTime?         @map("last_bid_at")
  extendedAt               DateTime?         @map("extended_at")
  shippingInfo             Json?             @map("shipping_info")
  pickupAvailable          Boolean           @default(false) @map("pickup_available")
  pickupAddress            String?           @map("pickup_address")
  status                   ProductStatus     @default(DRAFT)
  rejectionReason          String?           @map("rejection_reason")
  viewCount                Int               @default(0) @map("view_count")
  favoriteCount            Int               @default(0) @map("favorite_count")
  watcherCount             Int               @default(0) @map("watcher_count")
  approvedAt               DateTime?         @map("approved_at")
  approvedBy               String?           @map("approved_by")
  createdAt                DateTime          @default(now()) @map("created_at")
  updatedAt                DateTime          @updatedAt @map("updated_at")
  descriptionAr            String?           @map("description_ar")
  locationAr               String?           @map("location_ar")
  shortDescriptionAr       String?           @map("short_description_ar")
  titleAr                  String?           @map("title_ar")
  auctionReminders         AuctionReminder[]
  autoBids                 AutoBid[]
  bids                     Bid[]
  commissions              Commission[]
  files                    File[]
  productTags              ProductTag[]
  agent                    Agent?            @relation(fields: [agentId], references: [id])
  brand                    Brand?            @relation(fields: [brandId], references: [id])
  category                 Category          @relation(fields: [categoryId], references: [id])
  highestBidder            User?             @relation("ProductHighestBidder", fields: [highestBidderId], references: [id])
  winner                   User?             @relation("ProductWinner", fields: [winnerId], references: [id])
  favorites                UserFavorite[]

  @@map("products")
}

model Bid {
  id        String    @id @default(cuid())
  productId String    @map("product_id")
  userId    String    @map("user_id")
  amount    Decimal   @db.Decimal(12, 2)
  maxAmount Decimal?  @map("max_amount") @db.Decimal(12, 2)
  bidType   BidType   @default(MANUAL) @map("bid_type")
  status    BidStatus @default(ACTIVE)
  userAgent String?   @map("user_agent")
  ipAddress String?   @map("ip_address")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  outbidAt  DateTime? @map("outbid_at")
  product   Product   @relation(fields: [productId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([productId, amount(sort: Desc)])
  @@index([userId, createdAt])
  @@map("bids")
}

model AutoBid {
  id        String   @id @default(cuid())
  productId String   @map("product_id")
  userId    String   @map("user_id")
  maxAmount Decimal  @map("max_amount") @db.Decimal(12, 2)
  increment Decimal  @default(5) @db.Decimal(10, 2)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
  @@map("auto_bids")
}

model Transaction {
  id                String            @id @default(cuid())
  userId            String            @map("user_id")
  relatedId         String?           @map("related_id")
  relatedType       String?           @map("related_type")
  transactionType   TransactionType   @map("transaction_type")
  amountReal        Decimal           @map("amount_real") @db.Decimal(12, 2)
  amountVirtual     Decimal           @map("amount_virtual") @db.Decimal(12, 2)
  fee               Decimal           @default(0) @db.Decimal(12, 2)
  currency          String            @default("USD")
  status            TransactionStatus @default(PENDING)
  paymentMethod     String?           @map("payment_method")
  externalReference String?           @map("external_reference")
  paymentDetails    Json?             @map("payment_details")
  processedAt       DateTime?         @map("processed_at")
  processedBy       String?           @map("processed_by")
  failureReason     String?           @map("failure_reason")
  description       String
  metadata          Json?             @default("{}")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  user              User              @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([transactionType, status])
  @@map("transactions")
}

model PaymentMethod {
  id          String            @id @default(cuid())
  userId      String            @map("user_id")
  methodType  PaymentMethodType @map("method_type")
  provider    String
  credentials Json              @default("{}")
  isDefault   Boolean           @default(false) @map("is_default")
  isVerified  Boolean           @default(false) @map("is_verified")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  user        User              @relation(fields: [userId], references: [id])

  @@map("payment_methods")
}

model Commission {
  id               String           @id @default(cuid())
  agentId          String           @map("agent_id")
  productId        String           @map("product_id")
  saleAmount       Decimal          @map("sale_amount") @db.Decimal(12, 2)
  commissionRate   Decimal          @map("commission_rate") @db.Decimal(4, 4)
  commissionAmount Decimal          @map("commission_amount") @db.Decimal(12, 2)
  platformFee      Decimal          @map("platform_fee") @db.Decimal(12, 2)
  agentPayout      Decimal          @map("agent_payout") @db.Decimal(12, 2)
  status           CommissionStatus @default(PENDING)
  paidAt           DateTime?        @map("paid_at")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  agent            Agent            @relation(fields: [agentId], references: [id])
  product          Product          @relation(fields: [productId], references: [id])

  @@map("commissions")
}

model Notification {
  id               String           @id @default(cuid())
  userId           String           @map("user_id")
  relatedId        String?          @map("related_id")
  relatedType      String?          @map("related_type")
  notificationType NotificationType @map("notification_type")
  title            String
  message          String
  data             Json?            @default("{}")
  isRead           Boolean          @default(false) @map("is_read")
  deliveryMethod   DeliveryMethod   @map("delivery_method")
  sentAt           DateTime?        @map("sent_at")
  readAt           DateTime?        @map("read_at")
  createdAt        DateTime         @default(now()) @map("created_at")
  user             User             @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@map("notifications")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_sessions")
}

model UserFavorite {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("user_favorites")
}

model File {
  id           String   @id @default(cuid())
  filename     String
  originalName String   @map("original_name")
  path         String
  mimeType     String   @map("mime_type")
  size         Int
  uploadedBy   String   @map("uploaded_by")
  productId    String?  @map("product_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  product      Product? @relation(fields: [productId], references: [id])
  uploader     User     @relation("FileUploader", fields: [uploadedBy], references: [id])

  @@map("files")
}

model AgentReview {
  id        String   @id @default(cuid())
  agentId   String   @map("agent_id")
  userId    String   @map("user_id")
  rating    Decimal  @db.Decimal(2, 1)
  title     String?
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  agent     Agent    @relation("AgentReviews", fields: [agentId], references: [id])
  user      User     @relation("ReviewAuthor", fields: [userId], references: [id])

  @@unique([agentId, userId])
  @@map("agent_reviews")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  targetId    String   @map("target_id")
  entityType  String   @map("entity_type")
  entityId    String   @map("entity_id")
  action      String
  oldValues   Json?    @map("old_values")
  newValues   Json?    @map("new_values")
  ipAddress   String   @map("ip_address")
  userAgent   String   @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")
  target      User     @relation("AuditTarget", fields: [targetId], references: [id])
  performedBy User     @relation("AuditPerformedBy", fields: [userId], references: [id])

  @@index([entityType, entityId])
  @@index([userId, createdAt])
  @@map("audit_logs")
}

model AuctionReminder {
  id           String   @id @default(cuid())
  productId    String   @map("product_id")
  reminderType String   @map("reminder_type")
  reminderTime String   @map("reminder_time")
  sentAt       DateTime @map("sent_at")
  createdAt    DateTime @default(now()) @map("created_at")
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, reminderType, reminderTime])
  @@index([productId, sentAt])
  @@map("auction_reminders")
}

model BinanceRecharge {
  id              String                @id @default(cuid())
  userId          String                @map("user_id")
  amount          Decimal               @db.Decimal(12, 2)
  currency        String                @default("USDT")
  binanceOrderId  String?               @map("binance_order_id")
  binanceTxId     String?               @map("binance_tx_id")
  status          BinanceRechargeStatus @default(PENDING)
  paymentMethod   String                @default("BINANCE_PAY") @map("payment_method")
  binanceResponse Json?                 @map("binance_response")
  failureReason   String?               @map("failure_reason")
  processedAt     DateTime?             @map("processed_at")
  processedBy     String?               @map("processed_by")
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")
  user            User                  @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@index([binanceOrderId])
  @@map("binance_recharges")
}

model WhishRecharge {
  id             String              @id @default(cuid())
  userId         String              @map("user_id")
  amount         Decimal             @db.Decimal(12, 2)
  currency       String              @default("USD")
  transactionId  String              @unique @map("transaction_id")
  whishPaymentId String?             @map("whish_payment_id")
  status         WhishRechargeStatus @default(PENDING)
  paymentMethod  String              @default("WHISH_MONEY") @map("payment_method")
  processingFee  Decimal             @default(0) @map("processing_fee") @db.Decimal(12, 2)
  whishResponse  Json?               @map("whish_response")
  failureReason  String?             @map("failure_reason")
  processedAt    DateTime?           @map("processed_at")
  processedBy    String?             @map("processed_by")
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")
  user           User                @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@index([transactionId])
  @@map("whish_recharges")
}

model SupportTicket {
  id          String             @id @default(cuid())
  userId      String             @map("user_id")
  subject     String
  subjectAr   String?            @map("subject_ar")
  description String
  priority    TicketPriority     @default(MEDIUM)
  status      TicketStatus       @default(OPEN)
  category    TicketCategory     @default(GENERAL)
  assignedTo  String?            @map("assigned_to")
  assignedAt  DateTime?          @map("assigned_at")
  resolvedAt  DateTime?          @map("resolved_at")
  resolvedBy  String?            @map("resolved_by")
  resolution  String?
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")
  messages    SupportMessage[]
  assignee    User?              @relation("TicketAssignee", fields: [assignedTo], references: [id])
  resolver    User?              @relation("TicketResolver", fields: [resolvedBy], references: [id])
  user        User               @relation(fields: [userId], references: [id])
  attachments TicketAttachment[]

  @@index([userId, status])
  @@index([assignedTo, status])
  @@map("support_tickets")
}

model SupportMessage {
  id         String        @id @default(cuid())
  ticketId   String        @map("ticket_id")
  userId     String        @map("user_id")
  message    String
  isInternal Boolean       @default(false) @map("is_internal")
  createdAt  DateTime      @default(now()) @map("created_at")
  ticket     SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user       User          @relation("SupportMessageUser", fields: [userId], references: [id])

  @@index([ticketId, createdAt])
  @@map("support_messages")
}

model TicketAttachment {
  id           String        @id @default(cuid())
  ticketId     String        @map("ticket_id")
  userId       String        @map("user_id")
  filename     String
  originalName String        @map("original_name")
  path         String
  mimeType     String        @map("mime_type")
  size         Int
  createdAt    DateTime      @default(now()) @map("created_at")
  ticket       SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user         User          @relation("TicketAttachmentUser", fields: [userId], references: [id])

  @@map("ticket_attachments")
}

model BalanceAdjustment {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  adjustedBy    String      @map("adjusted_by")
  balanceType   BalanceType
  amount        Decimal     @db.Decimal(12, 2)
  reason        String
  reasonAr      String?     @map("reason_ar")
  balanceBefore Decimal     @map("balance_before") @db.Decimal(12, 2)
  balanceAfter  Decimal     @map("balance_after") @db.Decimal(12, 2)
  createdAt     DateTime    @default(now()) @map("created_at")
  admin         User        @relation("AdminBalanceAdjustments", fields: [adjustedBy], references: [id])
  user          User        @relation("UserBalanceAdjustments", fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([adjustedBy, createdAt])
  @@map("balance_adjustments")
}

model NotificationPreference {
  id                 String   @id @default(cuid())
  userId             String   @unique @map("user_id")
  emailBidPlaced     Boolean  @default(true) @map("email_bid_placed")
  emailBidOutbid     Boolean  @default(true) @map("email_bid_outbid")
  emailAuctionEnding Boolean  @default(true) @map("email_auction_ending")
  emailAuctionWon    Boolean  @default(true) @map("email_auction_won")
  emailPayments      Boolean  @default(true) @map("email_payments")
  pushBidPlaced      Boolean  @default(true) @map("push_bid_placed")
  pushBidOutbid      Boolean  @default(true) @map("push_bid_outbid")
  pushAuctionEnding  Boolean  @default(true) @map("push_auction_ending")
  pushAuctionWon     Boolean  @default(true) @map("push_auction_won")
  pushPayments       Boolean  @default(true) @map("push_payments")
  smsAuctionWon      Boolean  @default(false) @map("sms_auction_won")
  smsPayments        Boolean  @default(false) @map("sms_payments")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

enum UserType {
  BUYER
  AGENT
  ADMIN
  SUPER_ADMIN
}

enum KYCStatus {
  PENDING
  UNDER_REVIEW
  VERIFIED
  REJECTED
}

enum AgentStatus {
  PENDING
  APPROVED
  SUSPENDED
  REJECTED
}

enum BusinessType {
  INDIVIDUAL
  LLC
  CORPORATION
  PARTNERSHIP
  NON_PROFIT
}

enum ProductCondition {
  NEW
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum ProductStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  SOLD
  ARCHIVED
}

enum AuctionType {
  LIVE
  SEALED_BID
  BUY_NOW
  HYBRID
}

enum AuctionStatus {
  SCHEDULED
  LIVE
  PAUSED
  ENDED
  CANCELLED
}

enum BidType {
  MANUAL
  AUTOMATIC
}

enum BidStatus {
  ACTIVE
  OUTBID
  WINNING
  WON
  LOST
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  BID_PLACEMENT
  AUCTION_WIN
  REFUND
  COMMISSION
  FEE
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PAYPAL
  STRIPE
  CRYPTO
}

enum CommissionStatus {
  PENDING
  PAID
  FAILED
}

enum NotificationType {
  BID_PLACED
  BID_OUTBID
  AUCTION_STARTING
  AUCTION_ENDING
  AUCTION_WON
  AUCTION_LOST
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  AGENT_APPROVED
  AGENT_REJECTED
  PRODUCT_APPROVED
  PRODUCT_REJECTED
  SYSTEM_ALERT
  BID_REFUNDED
  PAYMENT_REQUIRED
  ACCOUNT_UPDATE
}

enum DeliveryMethod {
  EMAIL
  PUSH
  SMS
  IN_APP
}

enum BinanceRechargeStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum WhishRechargeStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_CUSTOMER
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  GENERAL
  TECHNICAL
  BILLING
  ACCOUNT
  BIDDING
  PAYMENT
  FEATURE_REQUEST
}

enum BalanceType {
  REAL
  VIRTUAL
  USD
}
