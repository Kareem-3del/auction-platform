// Prisma Schema for Global Auction Platform
// This file defines the database schema based on ERD.md

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT
// ============================================================================

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  phone                 String?  @unique
  passwordHash          String   @map("password_hash")
  
  // Personal Information
  firstName             String   @map("first_name")
  lastName              String   @map("last_name")
  avatarUrl             String?  @map("avatar_url")
  
  // Anonymity Settings
  isAnonymousDisplay    Boolean  @default(true) @map("is_anonymous_display")
  anonymousDisplayName  String   @map("anonymous_display_name")
  anonymousAvatarUrl    String   @map("anonymous_avatar_url")
  
  // User Type and Status
  userType              UserType @default(BUYER) @map("user_type")
  isActive              Boolean  @default(true) @map("is_active")
  
  // Balance Management
  balanceReal           Decimal  @default(0) @db.Decimal(12, 2) @map("balance_real")
  balanceVirtual        Decimal  @default(0) @db.Decimal(12, 2) @map("balance_virtual")
  virtualMultiplier     Decimal  @default(3.0) @db.Decimal(4, 2) @map("virtual_multiplier")
  
  // KYC Verification
  kycStatus             KYCStatus @default(PENDING) @map("kyc_status")
  kycDocuments          Json?     @map("kyc_documents")
  kycSubmittedAt        DateTime? @map("kyc_submitted_at")
  kycVerifiedAt         DateTime? @map("kyc_verified_at")
  
  // Account Verification
  emailVerified         Boolean   @default(false) @map("email_verified")
  emailVerifiedAt       DateTime? @map("email_verified_at")
  phoneVerified         Boolean   @default(false) @map("phone_verified")
  phoneVerifiedAt       DateTime? @map("phone_verified_at")
  
  // Security
  lastLoginAt           DateTime? @map("last_login_at")
  lastLoginIP           String?   @map("last_login_ip")
  loginAttempts         Int       @default(0) @map("login_attempts")
  lockedUntil           DateTime? @map("locked_until")
  
  // Notification Preferences
  notificationSoundEnabled Boolean @default(true) @map("notification_sound_enabled")
  emailNotificationsEnabled Boolean @default(true) @map("email_notifications_enabled")
  pushNotificationsEnabled Boolean @default(true) @map("push_notifications_enabled")
  
  // Timestamps
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  
  // Relations
  agent                 Agent?
  bids                  Bid[]
  transactions          Transaction[]
  notifications         Notification[]
  sessions              UserSession[]
  favorites             UserFavorite[]
  paymentMethods        PaymentMethod[]
  autoBids              AutoBid[]
  reviews               AgentReview[] @relation("ReviewAuthor")
  emailVerifications    EmailVerification[]
  uploadedFiles         File[] @relation("FileUploader")
  wonAuctions           Auction[] @relation("AuctionWinner")
  highestBidAuctions    Auction[] @relation("HighestBidder")
  
  // Audit Relations
  createdAudits         AuditLog[] @relation("AuditPerformedBy")
  targetedAudits        AuditLog[] @relation("AuditTarget")
  
  @@map("users")
}

model Agent {
  id                    String   @id @default(cuid())
  userId                String   @unique @map("user_id")
  
  // Business Information
  businessName          String   @map("business_name")
  displayName           String   @map("display_name")
  bio                   String?
  logoUrl               String?  @map("logo_url")
  bannerImageUrl        String?  @map("banner_image_url")
  websiteUrl            String?  @map("website_url")
  
  // Business Details
  businessType          BusinessType @map("business_type")
  licenseNumber         String?      @map("license_number")
  registrationNumber    String?      @map("registration_number")
  taxId                 String?      @map("tax_id")
  
  // Status and Performance
  status                AgentStatus @default(PENDING)
  commissionRate        Decimal     @default(0.05) @db.Decimal(4, 4) @map("commission_rate")
  totalSales            Decimal     @default(0) @db.Decimal(15, 2) @map("total_sales")
  totalCommissions      Decimal     @default(0) @db.Decimal(15, 2) @map("total_commissions")
  totalAuctions         Int         @default(0) @map("total_auctions")
  successfulAuctions    Int         @default(0) @map("successful_auctions")
  averageAuctionValue   Decimal     @default(0) @db.Decimal(12, 2) @map("average_auction_value")
  rating                Decimal     @default(0) @db.Decimal(3, 2)
  reviewCount           Int         @default(0) @map("review_count")
  
  // Settings
  autoApprovalLimit     Decimal  @default(1000) @db.Decimal(10, 2) @map("auto_approval_limit")
  requiresApproval      Boolean  @default(true) @map("requires_approval")
  
  // Verification
  verificationDocuments Json?    @map("verification_documents")
  backgroundCheckData   Json?    @map("background_check_data")
  complianceScore       Int      @default(100) @map("compliance_score")
  
  // Approval Data
  approvedAt            DateTime? @map("approved_at")
  approvedBy            String?   @map("approved_by")
  rejectedAt            DateTime? @map("rejected_at")
  rejectionReason       String?   @map("rejection_reason")
  
  // Timestamps
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  // Relations
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  products              Product[]
  auctions              Auction[]
  commissions           Commission[]
  reviews               AgentReview[] @relation("AgentReviews")
  
  @@map("agents")
}

// ============================================================================
// PRODUCT & CATEGORY MANAGEMENT
// ============================================================================

model Category {
  id          String    @id @default(cuid())
  parentId    String?   @map("parent_id")
  name        String
  slug        String    @unique
  description String?
  iconUrl     String?   @map("icon_url")
  sortOrder   Int       @default(0) @map("sort_order")
  isActive    Boolean   @default(true) @map("is_active")
  isFeatured  Boolean   @default(false) @map("is_featured")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  
  @@map("categories")
}

model Product {
  id                    String        @id @default(cuid())
  agentId               String        @map("agent_id")
  categoryId            String        @map("category_id")
  
  // Basic Information
  title                 String
  description           String        @db.Text
  shortDescription      String?       @map("short_description")
  condition             ProductCondition
  location              String
  
  // Images and Media
  images                Json          @default("[]")
  videos                Json?         @default("[]")
  documents             Json?         @default("[]")
  thumbnailIndex        Int           @default(0) @map("thumbnail_index")
  
  // Specifications
  specifications        Json?         @default("{}")
  customFields          Json?         @default("[]") @map("custom_fields")
  
  // Valuation
  estimatedValueMin     Decimal?      @db.Decimal(12, 2) @map("estimated_value_min")
  estimatedValueMax     Decimal?      @db.Decimal(12, 2) @map("estimated_value_max")
  reservePrice          Decimal?      @db.Decimal(12, 2) @map("reserve_price")
  
  // Logistics
  shippingInfo          Json?         @map("shipping_info")
  pickupAvailable       Boolean       @default(false) @map("pickup_available")
  pickupAddress         String?       @map("pickup_address")
  
  // Status and Analytics
  status                ProductStatus @default(DRAFT)
  rejectionReason       String?       @map("rejection_reason")
  viewCount             Int           @default(0) @map("view_count")
  favoriteCount         Int           @default(0) @map("favorite_count")
  
  // Approval Data
  approvedAt            DateTime?     @map("approved_at")
  approvedBy            String?       @map("approved_by")
  
  // Timestamps
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  
  // Relations
  agent                 Agent         @relation(fields: [agentId], references: [id])
  category              Category      @relation(fields: [categoryId], references: [id])
  auction               Auction?
  files                 File[]
  
  @@map("products")
}

// ============================================================================
// AUCTION SYSTEM
// ============================================================================

model Auction {
  id                    String        @id @default(cuid())
  productId             String        @unique @map("product_id")
  agentId               String        @map("agent_id")
  
  // Basic Information
  title                 String
  description           String?       @db.Text
  auctionType           AuctionType   @default(LIVE) @map("auction_type")
  status                AuctionStatus @default(SCHEDULED)
  
  // Pricing
  startingBid           Decimal       @db.Decimal(12, 2) @map("starting_bid")
  reservePrice          Decimal?      @db.Decimal(12, 2) @map("reserve_price")
  buyNowPrice           Decimal?      @db.Decimal(12, 2) @map("buy_now_price")
  currentBid            Decimal       @default(0) @db.Decimal(12, 2) @map("current_bid")
  bidIncrement          Decimal       @default(5) @db.Decimal(10, 2) @map("bid_increment")
  
  // Bidding Stats
  highestBidderId       String?       @map("highest_bidder_id")
  bidCount              Int           @default(0) @map("bid_count")
  uniqueBidders         Int           @default(0) @map("unique_bidders")
  
  // Timing
  startTime             DateTime      @map("start_time")
  endTime               DateTime      @map("end_time")
  timezone              String        @default("UTC")
  duration              Int           @map("duration_minutes")
  
  // Auto-Extension
  autoExtend            Boolean       @default(true) @map("auto_extend")
  extensionTriggerMinutes Int         @default(2) @map("extension_trigger_minutes")
  extensionDurationMinutes Int        @default(5) @map("extension_duration_minutes")
  maxExtensions         Int           @default(3) @map("max_extensions")
  extensionsUsed        Int           @default(0) @map("extensions_used")
  
  // Display Settings
  showBidderNames       Boolean       @default(true) @map("show_bidder_names")
  showBidCount          Boolean       @default(true) @map("show_bid_count")
  showWatcherCount      Boolean       @default(true) @map("show_watcher_count")
  
  // Analytics
  viewCount             Int           @default(0) @map("view_count")
  watcherCount          Int           @default(0) @map("watcher_count")
  
  // Auction Results
  winnerId              String?       @map("winner_id")
  finalPrice            Decimal?      @db.Decimal(12, 2) @map("final_price")
  soldAt                DateTime?     @map("sold_at")
  
  // Timing Actual
  actualStartTime       DateTime?     @map("actual_start_time")
  actualEndTime         DateTime?     @map("actual_end_time")
  lastBidAt             DateTime?     @map("last_bid_at")
  extendedAt            DateTime?     @map("extended_at")
  
  // Settings
  settings              Json?         @default("{}")
  
  // Timestamps
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  
  // Relations
  product               Product       @relation(fields: [productId], references: [id])
  agent                 Agent         @relation(fields: [agentId], references: [id])
  bids                  Bid[]
  autoBids              AutoBid[]
  favorites             UserFavorite[]
  commissions           Commission[]
  winner                User?         @relation("AuctionWinner", fields: [winnerId], references: [id])
  highestBidder         User?         @relation("HighestBidder", fields: [highestBidderId], references: [id])
  
  @@map("auctions")
}

model Bid {
  id              String    @id @default(cuid())
  auctionId       String    @map("auction_id")
  userId          String    @map("user_id")
  
  // Bid Information
  amount          Decimal   @db.Decimal(12, 2)
  maxAmount       Decimal?  @db.Decimal(12, 2) @map("max_amount")
  bidType         BidType   @default(MANUAL) @map("bid_type")
  status          BidStatus @default(ACTIVE)
  
  // Metadata
  userAgent       String?   @map("user_agent")
  ipAddress       String?   @map("ip_address")
  
  // Timing
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  outbidAt        DateTime? @map("outbid_at")
  
  // Relations
  auction         Auction   @relation(fields: [auctionId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  
  @@map("bids")
  @@index([auctionId, amount(sort: Desc)])
  @@index([userId, createdAt])
}

model AutoBid {
  id              String   @id @default(cuid())
  auctionId       String   @map("auction_id")
  userId          String   @map("user_id")
  
  maxAmount       Decimal  @db.Decimal(12, 2) @map("max_amount")
  increment       Decimal  @default(5) @db.Decimal(10, 2)
  isActive        Boolean  @default(true) @map("is_active")
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  auction         Auction  @relation(fields: [auctionId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  
  @@unique([auctionId, userId])
  @@map("auto_bids")
}

// ============================================================================
// FINANCIAL SYSTEM
// ============================================================================

model Transaction {
  id                String            @id @default(cuid())
  userId            String            @map("user_id")
  relatedId         String?           @map("related_id")
  relatedType       String?           @map("related_type")
  
  // Transaction Details
  transactionType   TransactionType   @map("transaction_type")
  amountReal        Decimal           @db.Decimal(12, 2) @map("amount_real")
  amountVirtual     Decimal           @db.Decimal(12, 2) @map("amount_virtual")
  fee               Decimal           @default(0) @db.Decimal(12, 2)
  currency          String            @default("USD")
  
  // Status
  status            TransactionStatus @default(PENDING)
  
  // Payment Details
  paymentMethod     String?           @map("payment_method")
  externalReference String?           @map("external_reference")
  paymentDetails    Json?             @map("payment_details")
  
  // Processing
  processedAt       DateTime?         @map("processed_at")
  processedBy       String?           @map("processed_by")
  failureReason     String?           @map("failure_reason")
  
  // Description
  description       String
  metadata          Json?             @default("{}")
  
  // Timestamps
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  
  // Relations
  user              User              @relation(fields: [userId], references: [id])
  
  @@map("transactions")
  @@index([userId, createdAt])
  @@index([transactionType, status])
}

model PaymentMethod {
  id              String            @id @default(cuid())
  userId          String            @map("user_id")
  
  methodType      PaymentMethodType @map("method_type")
  provider        String
  credentials     Json              @default("{}")
  isDefault       Boolean           @default(false) @map("is_default")
  isVerified      Boolean           @default(false) @map("is_verified")
  
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  
  // Relations
  user            User              @relation(fields: [userId], references: [id])
  
  @@map("payment_methods")
}

model Commission {
  id                String           @id @default(cuid())
  agentId           String           @map("agent_id")
  auctionId         String           @map("auction_id")
  
  saleAmount        Decimal          @db.Decimal(12, 2) @map("sale_amount")
  commissionRate    Decimal          @db.Decimal(4, 4) @map("commission_rate")
  commissionAmount  Decimal          @db.Decimal(12, 2) @map("commission_amount")
  platformFee       Decimal          @db.Decimal(12, 2) @map("platform_fee")
  agentPayout       Decimal          @db.Decimal(12, 2) @map("agent_payout")
  
  status            CommissionStatus @default(PENDING)
  paidAt            DateTime?        @map("paid_at")
  
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  
  // Relations
  agent             Agent            @relation(fields: [agentId], references: [id])
  auction           Auction          @relation(fields: [auctionId], references: [id])
  
  @@map("commissions")
}

// ============================================================================
// NOTIFICATION SYSTEM
// ============================================================================

model Notification {
  id              String            @id @default(cuid())
  userId          String            @map("user_id")
  relatedId       String?           @map("related_id")
  relatedType     String?           @map("related_type")
  
  notificationType NotificationType @map("notification_type")
  title           String
  message         String            @db.Text
  data            Json?             @default("{}")
  
  isRead          Boolean           @default(false) @map("is_read")
  deliveryMethod  DeliveryMethod    @map("delivery_method")
  
  sentAt          DateTime?         @map("sent_at")
  readAt          DateTime?         @map("read_at")
  createdAt       DateTime          @default(now()) @map("created_at")
  
  // Relations
  user            User              @relation(fields: [userId], references: [id])
  
  @@map("notifications")
  @@index([userId, isRead])
}

// ============================================================================
// SESSION & FAVORITES
// ============================================================================

model UserSession {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  sessionToken    String   @unique @map("session_token")
  
  deviceInfo      Json?    @map("device_info")
  ipAddress       String   @map("ip_address")
  userAgent       String?  @map("user_agent")
  
  lastActivity    DateTime @map("last_activity")
  expiresAt       DateTime @map("expires_at")
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
  @@index([userId])
  @@index([expiresAt])
}

model UserFavorite {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  auctionId String   @map("auction_id")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, auctionId])
  @@map("user_favorites")
}

// ============================================================================
// SYSTEM MANAGEMENT
// ============================================================================

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  dataType    String   @map("data_type")
  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedBy   String?  @map("updated_by")
  
  @@map("system_settings")
}

model AuditLog {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  entityType   String   @map("entity_type")
  entityId     String?  @map("entity_id")
  action       String
  oldValues    Json?    @map("old_values")
  newValues    Json?    @map("new_values")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  
  // Relations
  user         User?    @relation("AuditPerformedBy", fields: [userId], references: [id])
  targetUser   User?    @relation("AuditTarget", fields: [entityId], references: [id])
  
  @@map("audit_logs")
  @@index([userId, createdAt])
  @@index([entityType, entityId])
}

model File {
  id           String   @id @default(cuid())
  uploadedBy   String   @map("uploaded_by")
  relatedId    String?  @map("related_id")
  relatedType  String?  @map("related_type")
  
  filename     String
  originalName String   @map("original_name")
  mimeType     String   @map("mime_type")
  fileSize     Int      @map("file_size")
  storagePath  String   @map("storage_path")
  publicUrl    String   @map("public_url")
  
  metadata     Json?    @default("{}")
  createdAt    DateTime @default(now()) @map("created_at")
  
  // Relations
  uploader     User     @relation("FileUploader", fields: [uploadedBy], references: [id])
  product      Product? @relation(fields: [relatedId], references: [id])
  
  @@map("files")
  @@index([relatedType, relatedId])
}

model AgentReview {
  id              String   @id @default(cuid())
  agentId         String   @map("agent_id")
  reviewerId      String   @map("reviewer_id")
  auctionId       String?  @map("auction_id")
  
  rating          Int
  itemDescription Int      @map("item_description")
  itemCondition   Int      @map("item_condition")
  shipping        Int
  communication   Int
  professionalism Int
  
  comment         String?  @db.Text
  isVerified      Boolean  @default(false) @map("is_verified")
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  agent           Agent    @relation("AgentReviews", fields: [agentId], references: [id])
  reviewer        User     @relation("ReviewAuthor", fields: [reviewerId], references: [id])
  
  @@unique([reviewerId, agentId, auctionId])
  @@map("agent_reviews")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserType {
  BUYER
  AGENT
  ADMIN
  SUPER_ADMIN
}

enum KYCStatus {
  PENDING
  SUBMITTED
  UNDER_REVIEW
  VERIFIED
  REJECTED
  EXPIRED
}

enum BusinessType {
  INDIVIDUAL
  COMPANY
  AUCTION_HOUSE
  GALLERY
  DEALER
}

enum AgentStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  ACTIVE
  SUSPENDED
  REJECTED
  TERMINATED
}

enum ProductCondition {
  NEW
  LIKE_NEW
  EXCELLENT
  VERY_GOOD
  GOOD
  FAIR
  POOR
}

enum ProductStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  ARCHIVED
}

enum AuctionType {
  LIVE
  SEALED
  BUY_NOW
  RESERVE
}

enum AuctionStatus {
  SCHEDULED
  LIVE
  PAUSED
  ENDED
  CANCELLED
}

enum BidType {
  MANUAL
  AUTOMATIC
}

enum BidStatus {
  ACTIVE
  OUTBID
  WINNING
  WON
  LOST
  CANCELLED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  BID_HOLD
  BID_RELEASE
  AUCTION_WIN
  COMMISSION
  PAYOUT
  REFUND
  ADMIN_CREDIT
  ADMIN_DEBIT
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethodType {
  BINANCE_PAY
  CRYPTO_WALLET
  BANK_TRANSFER
  CREDIT_CARD
}

enum CommissionStatus {
  PENDING
  CALCULATED
  PAID
  CANCELLED
}

enum NotificationType {
  BID_OUTBID
  BID_WON
  AUCTION_ENDING
  AUCTION_STARTED
  AUCTION_CANCELLED
  PAYMENT_RECEIVED
  PAYOUT_PROCESSED
  KYC_APPROVED
  KYC_REJECTED
  AGENT_APPROVED
  AGENT_REJECTED
  SYSTEM_MAINTENANCE
  GENERAL
}

enum DeliveryMethod {
  IN_APP
  EMAIL
  SMS
  PUSH
}

// ============================================================================
// EMAIL VERIFICATION
// ============================================================================

model EmailVerification {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  token      String   @unique
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  
  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("email_verifications")
}