version: '3.8'

services:
  # Main Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: auction_app_prod
    restart: unless-stopped
    ports:
      - "3001:3000"  # Use port 3001 for production to avoid conflicts
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
    depends_on:
      - postgres
      - redis
    networks:
      - auction_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: auction_postgres_prod
    restart: unless-stopped
    ports:
      - "5433:5432"  # Use different port to avoid conflicts
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-auction_platform}
      - POSTGRES_USER=${POSTGRES_USER:-auction_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=128MB
      -c effective_cache_size=512MB
      -c maintenance_work_mem=32MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=8MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=2MB
      -c min_wal_size=512MB
      -c max_wal_size=2GB
    networks:
      - auction_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-auction_user} -d ${POSTGRES_DB:-auction_platform}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: auction_redis_prod
    restart: unless-stopped
    ports:
      - "6380:6379"  # Use different port to avoid conflicts
    command: >
      redis-server 
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 0
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_prod_data:/data
    networks:
      - auction_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: auction_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - /var/www/certbot:/var/www/certbot
    depends_on:
      - app
    networks:
      - auction_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SSL Certificate Management (Production only)
  certbot:
    image: certbot/certbot:latest
    container_name: auction_certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    command: echo "SSL certificate management ready"
    networks:
      - auction_network

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  auction_network:
    driver: bridge

# Example .env file for production:
# DATABASE_URL=postgresql://auction_user:your_secure_password@postgres:5432/auction_platform
# POSTGRES_DB=auction_platform
# POSTGRES_USER=auction_user
# POSTGRES_PASSWORD=your_secure_password
# NEXTAUTH_SECRET=your_nextauth_secret_key_here
# JWT_SECRET=your_jwt_secret_key_here
# NEXT_PUBLIC_APP_URL=https://yourdomain.com
# NEXT_PUBLIC_WS_URL=wss://yourdomain.com